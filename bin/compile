#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir>

# fail fast
set -eo pipefail

# debug
# set -x

# parse and derive params
BUILD_DIR=$1
CACHE_DIR=$2
LP_DIR=$(cd "$(dirname "$0")"; cd ..; pwd)

function error() {
  echo " !     $*" >&2
  exit 1
}

function topic() {
  echo "-----> $*"
}

function indent() {
  c='s/^/       /'
  case $(uname) in
    Darwin) sed -l "$c";;
    *)      sed -u "$c";;
  esac
}

if ! grep --invert-match -e "^\s*#" -e "^\s*$" -e "^:repo:" -q "${BUILD_DIR}/Aptfile"; then
  echo "
!       You have no packages listed in your Aptfile. If you don't need custom Apt packages,
!       delete your Aptfile and remove the buildpack with:
!
!       $ heroku buildpacks:remove heroku-community/apt
"
  exit 0
fi

# Store which STACK we are running on in the cache to bust the cache if it changes
if [[ -f "$CACHE_DIR/.apt/STACK" ]]; then
  CACHED_STACK=$(cat "$CACHE_DIR/.apt/STACK")
else
  CACHED_STACK=$STACK
fi

# Ensure we store the STACK in the cache for next time.
# mkdir -p "$CACHE_DIR/.apt"
echo "$STACK" > "$CACHE_DIR/.apt/STACK"

APT_CACHE_DIR="$CACHE_DIR/apt/cache"
APT_STATE_DIR="$CACHE_DIR/apt/state"
APT_SOURCELIST_DIR="$CACHE_DIR/apt/sources"   # place custom sources.list here
APT_SOURCEPARTS_DIR="$APT_SOURCELIST_DIR/sources.list.d"

APT_SOURCES="$APT_SOURCELIST_DIR/sources.list"

APT_VERSION=$(apt-get -v | awk 'NR == 1{ print $2 }')

# apt-key add "$BUILD_DIR/trusted.gpg"

# cp "$BUILD_DIR/trusted.gpg" /etc/apt/trusted.gpg.d/
# python3 -c "import apt_pkg; print('apt_pkg installed successfully')"



topic "Test4"
# APT_OPTIONS=("-o" "debug::nolocking=true" "-o" "dir::cache=$APT_CACHE_DIR" "-o" "dir::state=$APT_STATE_DIR")
# apt-get "${APT_OPTIONS[@]}" -y "${APT_FORCE_YES[@]}" -d install libssl-dev
# topic "Test5"
# apt-get "${APT_OPTIONS[@]}" -y "${APT_FORCE_YES[@]}" -d install software-properties-common
# topic "Test6"
# apt-get "${APT_OPTIONS[@]}" -y "${APT_FORCE_YES[@]}" -d install python3-dev
# topic "Test7"
# apt-get "${APT_OPTIONS[@]}" -y "${APT_FORCE_YES[@]}" -d install python3-pip
# topic "Test8"
# apt-get "${APT_OPTIONS[@]}" -y "${APT_FORCE_YES[@]}" -d install python3-apt
# topic "Test9"


# apt-get "${APT_OPTIONS[@]}" update 2>&1

# cp "$BUILD_DIR/.apt/usr/share/python-apt/templates/Ubuntu.info" "$BUILD_DIR/.apt/usr/share/python-apt/templates/Ubuntu_jammy.info"
# cp "$BUILD_DIR/.apt/usr/share/python-apt/templates/Ubuntu.info" "$BUILD_DIR/.apt/usr/share/python-apt/templates/Ubuntu_jammy"
# ls "$BUILD_DIR/.apt/usr/share/python-apt/templates"
# export PYTHONPATH="$BUILD_DIR/.apt/usr/lib/python3/dist-packages:$BUILD_DIR/.apt/usr/share/python-apt/templates"
# export PATH="$BUILD_DIR/.apt/usr/bin:$PATH"
# export LD_LIBRARY_PATH="$BUILD_DIR/.apt/usr/lib/x86_64-linux-gnu:$BUILD_DIR/.apt/usr/lib/i386-linux-gnu:$BUILD_DIR/.apt/usr/lib:$LD_LIBRARY_PATH"
# export LIBRARY_PATH="$BUILD_DIR/.apt/usr/lib/x86_64-linux-gnu:$BUILD_DIR/.apt/usr/lib/i386-linux-gnu:$BUILD_DIR/.apt/usr/lib:$LIBRARY_PATH"
# export INCLUDE_PATH="$BUILD_DIR/.apt/usr/include:$BUILD_DIR/.apt/usr/include/x86_64-linux-gnu:$INCLUDE_PATH"
# export CPATH="$INCLUDE_PATH"
# export CPPPATH="$INCLUDE_PATH"
# export PKG_CONFIG_PATH="$BUILD_DIR/.apt/usr/lib/x86_64-linux-gnu/pkgconfig:$BUILD_DIR/.apt/usr/lib/i386-linux-gnu/pkgconfig:$BUILD_DIR/.apt/usr/lib/pkgconfig:$PKG_CONFIG_PATH"

# topic "---------------Asure ppa:ethereum/ethereum ---------------------"
# add-apt-repository ppa:ethereum/ethereum  "${APT_OPTIONS[@]}" -y "${APT_FORCE_YES[@]}" 
# deb https://ppa.launchpadcontent.net/ethereum/ethereum/ubuntu noble main 

topic "---------------Asure solc ---------------------"
# apt install solc

SOLC_VERSION=0.8.6
SOLC_BIN_DIR=$BUILD_DIR/.heroku/solc/bin

mkdir -p $SOLC_BIN_DIR
curl -L https://github.com/ethereum/solidity/releases/download/v$SOLC_VERSION/solc-static-linux -o $SOLC_BIN_DIR/solc
chmod +x $SOLC_BIN_DIR/solc

topic "---------------Add solc to the PATH---------------------"
# Add solc to the PATH
# echo "export PATH=\$PATH:$SOLC_BIN_DIR" > $BUILD_DIR/.profile.d/solc.sh' > compile
mkdir -p $BUILD_DIR/.profile.d
echo "export PATH=\$PATH:$SOLC_BIN_DIR" > $BUILD_DIR/.profile.d/solc.sh

topic "---------------list directory for including---------------------"
topic "$BUILD_DIR/.apt/usr/include/x86_64-linux-gnu"
ls "$BUILD_DIR/.apt/usr/include/x86_64-linux-gnu"

topic $PATH
topic $LD_LIBRARY_PATH
topic $LIBRARY_PATH
topic $INCLUDE_PATH
